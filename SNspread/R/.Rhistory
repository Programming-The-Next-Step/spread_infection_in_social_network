gg.base <- ggplot(complete, aes(x = timepoints, y = IDSscore))
gg.base <- ggplot(complete, aes(x = timepoints, y = IDSscore))
gg.base + stat_summary(aes(group = condition, color = as.factor(condition)),
geom = "line", fun = mean, size = 2) +
ggtitle("Change")
gg.base <- ggplot(complete, aes(x = timepoint, y = IDSscore))
gg.base + stat_summary(aes(group = condition, color = as.factor(condition)),
geom = "line", fun = mean, size = 2) +
ggtitle("Change")
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic() +
scale_color_manual(values=c('#999999','#E69F00'))
p+labs(title="Tooth length per dose", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('#999999','#E69F00'))
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('#999999','#E69F00'))
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score")+
theme_classic())
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic())
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('#999999','#E69F00'))
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('red','blue'))
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('red','blue')) +
scale_fill_discrete(name = "Condition", labels = c("PCT-", "PCT+"))
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic(legend.title = "conditie") +
scale_color_manual(values=c('red','blue'))
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('red','blue'))
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('red','blue')) +
theme(legend.title = "Groep")
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score", fill = "groep")+
theme_classic() +
scale_color_manual(values=c('red','blue'))
p+labs(fill = "groep", title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('red','blue'))
p+labs(fill = "groep", title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")+
theme_classic() +
scale_color_manual(values=c('red','blue'))  +
labs(fill = "group")
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score")
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score") +
theme_classic()
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score") +
theme_classic(base_line_size = 2)
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score", size = 2) +
theme_classic()
p <- ggplot(df2, aes(x=time, y=IDSscore_mean, group=condition, color=as.factor(condition))) +
geom_line(size = 2) +
geom_point()+
geom_errorbar(aes(ymin=IDSscore_mean-IDSscore_sd, ymax=IDSscore_mean+IDSscore_sd), width=.2,
position=position_dodge(0.05))
print(p)
p <- ggplot(df2, aes(x=time, y=IDSscore_mean, group=condition, color=as.factor(condition))) +
geom_line(size = 1.5) +
geom_point()+
geom_errorbar(aes(ymin=IDSscore_mean-IDSscore_sd, ymax=IDSscore_mean+IDSscore_sd), width=.2,
position=position_dodge(0.05))
print(p)
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score") +
theme_classic()
p <- ggplot(df2, aes(x=time, y=IDSscore_mean, group=condition, color=as.factor(condition))) +
geom_line(size = 1) +
geom_point()+
geom_errorbar(aes(ymin=IDSscore_mean-IDSscore_sd, ymax=IDSscore_mean+IDSscore_sd), width=.2,
position=position_dodge(0.05))
print(p)
p+labs(title="IDS-score per groep voor alle meetmomenten.", x="Tijd (maanden)", y = "IDS-score") +
theme_classic()
p <- ggplot(df2, aes(x=time, y=IDSscore_mean, group=condition, color=as.factor(condition))) +
geom_line(size = 3) +
geom_point()+
geom_errorbar(aes(ymin=IDSscore_mean-IDSscore_sd, ymax=IDSscore_mean+IDSscore_sd), width=.5,
position=position_dodge(0.05))
print(p)
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score") +
theme_classic()
p <- ggplot(df2, aes(x=time, y=IDSscore_mean, group=condition, color=as.factor(condition))) +
geom_line(size = 3) +
geom_point()+
geom_errorbar(aes(ymin=IDSscore_mean-IDSscore_sd, ymax=IDSscore_mean+IDSscore_sd), width=.5,
position=position_dodge(0.05), size = 1)
print(p)
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score") +
theme_classic()
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score") +
theme_classic(base_size = 1)
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score", size = 1) +
theme_classic()
p+labs(title="IDS-score per groep voor alle meetmomenten", x="Tijd (maanden)", y = "IDS-score", size = 10) +
theme_classic()
p+labs(x="Tijd (maanden)", y = "IDS-score", size = 100) +
theme_classic()
?t.test
t.test(5.44, 4.25, paired = T)
(5.44-4.25)/sqrt(((6.1^2)/57) + ((4.3^2)/58))
# Add friends (default = 10)
edgelist =
# Plot network
??qgraph
??qgraph
# Add friends (default = 10)
edgelist =
# Plot network
?qgraph::qgraph
?qgraph::qgraph
matrix(0, nrow = (n+1), ncol = (n+1))
n = 10
edgelist = matrix(0, nrow = (n+1), ncol = (n+1))
edgelist = matrix(0, nrow = (n+1), ncol = (n+1))
n = 10
edgelist = matrix(0, nrow = (n+1), ncol = (n+1))
for(i in 1:(n+1) {
edgelist[i] = 1
}
for (i in 1:(n+1){
edgelist[i] = 1
}
edgelist = matrix(0, nrow = ((n + 1)*(n + 1)), ncol = 3)
colnames(edgelist) = c("input", "output", "connection")
paste("friends", 1:n, sep = "")
paste("friend", 1:n, sep = "")
n
# Make edgelist based on number of friends
n = 10
edgelist = matrix(0, nrow = (n + 1), ncol = 3)
colnames(edgelist) = c("input", "output", "connection")
friends = paste("friend", 1:n, sep = "")
for(i in 1:nrow(edgelist)){
edgelist[i,1] = "user"
edgelist[i,2] = friends[i]
edgelist[i,3] = 1
}
View(edgelist)
for(i in 1:nrow(n)){
edgelist[i,1] = "user"
edgelist[i,2] = friends[i]
edgelist[i,3] = 1
}
for(i in 1:n){
edgelist[i,1] = "user"
edgelist[i,2] = friends[i]
edgelist[i,3] = 1
}
edgelist = matrix(0, nrow = (n), ncol = 3)
qgraph::qgraph(edgelist)
edgelist = data.frame(
input = character(),
output = character(),
connection = numberic())
edgelist = data.frame(
input = character(),
output = character(),
connection = numeric())
edgelist = data.frame(
input = "user",
output = character(),
connection = numeric())
edgelist = data.frame(
input = rep("user",n),
output = character(),
connection = numeric())
rep("user",n)
edgelist = data.frame(
input = c(rep("user",n)),
output = character(),
connection = numeric())
# Make edgelist based on number of friends
n = 10
edgelist = data.frame(
input = rep("user",n),
output = character(),
connection = numeric())
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = character(),
output = character(),
connection = numeric())
for(i in 1:n){
edgelist$input[i] = "user"
edgelist$output[i] = friends[i]
edgelist$connection[i] = 1
}
edgelist$input = "user"
paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = paste("friend", 1:n, sep = ""),
connection = rep(1,n))
View(edgelist)
qgraph::qgraph(edgelist)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
edgelist = data.frame(
input = rep("user", n),
output = paste("friend", 1:n, sep = ""),
connection = rep(1,n))
# plot graph
qgraph::qgraph(edgelist)
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
sample(1:n, 1)
sample(1:n, 1)
sample(1:n, 1)
sample(1:n, 5)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist)
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
c(rep(1, n), rep(2, n_friendships))
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
colors = c(rep(1, n), rep(2, n_friendships))
qgraph::qgraph(edgelist, colors = colors)
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
igraph::igraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = c("red","blue"))
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = c(rep("red",3), "blue"))
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = c(rep("red",3), "blue"))
# Use colors for spread, create new graph every 5 seconds
qgraph::qgraph(edgelist, color = c(rep("red",2), "blue"))
qgraph::qgraph(edgelist, color = c("red", "blue"))
qgraph::qgraph(edgelist, color = c("red"))
}
create_graph(n=15)
# Simualte data!
library(tidyr)
library(lattice)
library(ggplot2)
sd_CI <- function (n, mean, cilow) {
var = sqrt(n)*((-cilow[1] + mean)/1.96)
sd = sqrt(var)
return(sd)
}
# t0 (intercept)
nrt = data.frame(subject = factor(1:126))
nrt$t0 = rnorm(126, 16.44, sd = 10.5)
nrt$t1.5 = rnorm(126, 18.61, sd = 12.2)
nrt$t3 = rnorm(126, 16.38, sd = 10.9)
nrt_long = gather(nrt, timepoint, IDSscore, t0:t3, factor_key = T)
contr = data.frame(subject = factor(127:239))
contr = data.frame(subject = factor(127:239))
contr$t0 = rnorm(113, 16.06, sd = 9.5)
contr$t1.5 = rnorm(113, 20.76, sd = 12.1)
contr$t3 = rnorm(113, 21.52, sd = 12.14)
contr_long = gather(contr, timepoint, IDSscore, t0:t3, factor_key = T)
contr_long$condition = 0
complete = rbind(nrt_long, contr_long)
View(contr_long)
nrt_long$condition = 1
complete = rbind(nrt_long, contr_long)
complete$time = numeric(nrow(complete))
for (i in 1:nrow(complete)) {
if (complete$timepoint[i] == "t0") {
complete$time[i] = 0
} else if (complete$timepoint[i] == "t1.5") {
complete$time[i] = 1.5
} else if (complete$timepoint[i] == "t3") {
complete$time[i] = 3
}
}
lm(IDSscore ~ timepoint + timepoint * condition, data = complete)
lm(IDSscore ~ time + I(time^2) + time * condition, data = complete)
lm(IDSscore ~ time + I(time^2) + time * condition, data = complete)
xyplot(IDSscore ~ time, data = complete, groups = condition)
xyplot(IDSscore ~ timepoint, data = complete, groups = condition)
gg.base <- ggplot(complete, aes(x = timepoint, y = IDSscore))
gg.base + stat_summary(aes(group = condition, color = as.factor(condition)),
geom = "line", fun = mean, size = 2) +
ggtitle("Change")
# Graph with error bar
df2 = data.frame(
time = rep(c(0, 1.5, 4.5, 7.5, 10.5, 13.5), 2),
condition =  rep(1:0, each = 6),
IDSscore_mean = c(apply(nrt[2:7], 2, mean), apply(contr[2:7], 2, mean)),
IDSscore_sd = c(apply(nrt[2:7], 2, sd), apply(contr[2:7], 2, sd))
)
devtools::create('SN_spread')
devtools::create('SNspread')
install.packages('matrixcalc')
c(rep("infected", 4), rep(0, 6))
df = data.frame(
name = rep("names", 10),
disease = c(rep("infected", 4), rep(0, 6))
)
View(df)
sum(df$disease)
sum(df$disease == "infected")
setwd("~/SNspread/R")
library(shiny)
packageVersion("shiny")
devtools::build()
devtools::document()
devtools::use_vignette()
usethis::use_vignette()
usethis::use_vignette("Explanation SNspread")
usethis::use_vignette("Explanation_SNspread")
sample(c(1,2),16)
sample(c(1,2),16, replace = T)
size <- 15
network2 <- create_network(n = size)
size <- 15
network2 <- create_network(n = size)
network2v1 <- update_network(network2, gender = sample(c(1, 2), (size + 1), replace = TRUE))
View(network2v1)
create_graph(network2v1)
