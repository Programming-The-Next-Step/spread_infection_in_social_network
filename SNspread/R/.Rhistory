}
edgelist = matrix(0, nrow = ((n + 1)*(n + 1)), ncol = 3)
colnames(edgelist) = c("input", "output", "connection")
paste("friends", 1:n, sep = "")
paste("friend", 1:n, sep = "")
n
# Make edgelist based on number of friends
n = 10
edgelist = matrix(0, nrow = (n + 1), ncol = 3)
colnames(edgelist) = c("input", "output", "connection")
friends = paste("friend", 1:n, sep = "")
for(i in 1:nrow(edgelist)){
edgelist[i,1] = "user"
edgelist[i,2] = friends[i]
edgelist[i,3] = 1
}
View(edgelist)
for(i in 1:nrow(n)){
edgelist[i,1] = "user"
edgelist[i,2] = friends[i]
edgelist[i,3] = 1
}
for(i in 1:n){
edgelist[i,1] = "user"
edgelist[i,2] = friends[i]
edgelist[i,3] = 1
}
edgelist = matrix(0, nrow = (n), ncol = 3)
qgraph::qgraph(edgelist)
edgelist = data.frame(
input = character(),
output = character(),
connection = numberic())
edgelist = data.frame(
input = character(),
output = character(),
connection = numeric())
edgelist = data.frame(
input = "user",
output = character(),
connection = numeric())
edgelist = data.frame(
input = rep("user",n),
output = character(),
connection = numeric())
rep("user",n)
edgelist = data.frame(
input = c(rep("user",n)),
output = character(),
connection = numeric())
# Make edgelist based on number of friends
n = 10
edgelist = data.frame(
input = rep("user",n),
output = character(),
connection = numeric())
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = character(),
output = character(),
connection = numeric())
for(i in 1:n){
edgelist$input[i] = "user"
edgelist$output[i] = friends[i]
edgelist$connection[i] = 1
}
edgelist$input = "user"
paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = paste("friend", 1:n, sep = ""),
connection = rep(1,n))
View(edgelist)
qgraph::qgraph(edgelist)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
edgelist = data.frame(
input = rep("user", n),
output = paste("friend", 1:n, sep = ""),
connection = rep(1,n))
# plot graph
qgraph::qgraph(edgelist)
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
sample(1:n, 1)
sample(1:n, 1)
sample(1:n, 1)
sample(1:n, 5)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist)
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
c(rep(1, n), rep(2, n_friendships))
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
colors = c(rep(1, n), rep(2, n_friendships))
qgraph::qgraph(edgelist, colors = colors)
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
igraph::igraph(edgelist, colors = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = "red")
# Use colors for spread, create new graph every 5 seconds
}
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = c("red","blue"))
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = c(rep("red",3), "blue"))
# Use colors for spread, create new graph every 5 seconds
}
create_graph(n=20)
create_graph <- function (n = 10){# n is number of friends
# Make edgelist
friends = paste("friend", 1:n, sep = "")
edgelist = data.frame(
input = rep("user", n),
output = friends,
connection = rep(1,n))
# Simulate some additional friendships
n_friendships = sample(1:n, 1)
edgelist2 = data.frame(
input = friends[sample(1:n, n_friendships)],
output = friends[sample(1:n, n_friendships)],
connection = rep(1,n_friendships)
)
# Complete edgelist
edgelist = rbind(edgelist, edgelist2)
# plot graph
qgraph::qgraph(edgelist, color = c(rep("red",3), "blue"))
# Use colors for spread, create new graph every 5 seconds
qgraph::qgraph(edgelist, color = c(rep("red",2), "blue"))
qgraph::qgraph(edgelist, color = c("red", "blue"))
qgraph::qgraph(edgelist, color = c("red"))
}
create_graph(n=15)
# Simualte data!
library(tidyr)
library(lattice)
library(ggplot2)
sd_CI <- function (n, mean, cilow) {
var = sqrt(n)*((-cilow[1] + mean)/1.96)
sd = sqrt(var)
return(sd)
}
# t0 (intercept)
nrt = data.frame(subject = factor(1:126))
nrt$t0 = rnorm(126, 16.44, sd = 10.5)
nrt$t1.5 = rnorm(126, 18.61, sd = 12.2)
nrt$t3 = rnorm(126, 16.38, sd = 10.9)
nrt_long = gather(nrt, timepoint, IDSscore, t0:t3, factor_key = T)
contr = data.frame(subject = factor(127:239))
contr = data.frame(subject = factor(127:239))
contr$t0 = rnorm(113, 16.06, sd = 9.5)
contr$t1.5 = rnorm(113, 20.76, sd = 12.1)
contr$t3 = rnorm(113, 21.52, sd = 12.14)
contr_long = gather(contr, timepoint, IDSscore, t0:t3, factor_key = T)
contr_long$condition = 0
complete = rbind(nrt_long, contr_long)
View(contr_long)
nrt_long$condition = 1
complete = rbind(nrt_long, contr_long)
complete$time = numeric(nrow(complete))
for (i in 1:nrow(complete)) {
if (complete$timepoint[i] == "t0") {
complete$time[i] = 0
} else if (complete$timepoint[i] == "t1.5") {
complete$time[i] = 1.5
} else if (complete$timepoint[i] == "t3") {
complete$time[i] = 3
}
}
lm(IDSscore ~ timepoint + timepoint * condition, data = complete)
lm(IDSscore ~ time + I(time^2) + time * condition, data = complete)
lm(IDSscore ~ time + I(time^2) + time * condition, data = complete)
xyplot(IDSscore ~ time, data = complete, groups = condition)
xyplot(IDSscore ~ timepoint, data = complete, groups = condition)
gg.base <- ggplot(complete, aes(x = timepoint, y = IDSscore))
gg.base + stat_summary(aes(group = condition, color = as.factor(condition)),
geom = "line", fun = mean, size = 2) +
ggtitle("Change")
# Graph with error bar
df2 = data.frame(
time = rep(c(0, 1.5, 4.5, 7.5, 10.5, 13.5), 2),
condition =  rep(1:0, each = 6),
IDSscore_mean = c(apply(nrt[2:7], 2, mean), apply(contr[2:7], 2, mean)),
IDSscore_sd = c(apply(nrt[2:7], 2, sd), apply(contr[2:7], 2, sd))
)
devtools::create('SN_spread')
devtools::create('SNspread')
install.packages('matrixcalc')
c(rep("infected", 4), rep(0, 6))
df = data.frame(
name = rep("names", 10),
disease = c(rep("infected", 4), rep(0, 6))
)
View(df)
sum(df$disease)
sum(df$disease == "infected")
setwd("~/SNspread/R")
devtools::build()
devtools::install()
devtools::test()
devtools::load_all()
runApp
runApp()
str(create_graph(create_network(10)))
class(create_graph(create_network(10)))
class(create_graph(sim_spread(create_network(10), 3)))
methods(plot())
methods('plot')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::build()
devtools::test()
devtools::test()
nw = create_network()
length(nw$gender)
gender = c(sample(c(0,1), 11, replace = T))
nw$gender = gender
View(nw)
devtools::build()
devtools::load_all()
update_network(nw, gender = rep(0,11))
devtools::build()
devtools::load_all()
update_network(nw, gender = rep(0,11))
update_network(nw, gender = rep(0,51))
ifelse(nw$gender == 0, "black", "blue")
devtools::build()
devtools::load_all()
create_graph(nw)
View(nw)
names1 = c("Jan", "Piet", "S", "B", "Z", "A")
devtools::build()
devtools::load_all()
update_network(nw, names = names1)
nw_names = update_network(nw, names = names1)
create_graph(nw_names)
devtools::build()
devtools::load_all()
nw_names = update_network(nw, names = names1)
View(nw_names)
create_graph(nw_names)
runApp()
devtools::build()
devtools::install()
devtools::test()
devtools::document(
)
runApp
runApp()
devtools::document()
?SNspread::update_network
runApp()
runApp()
runApp()
nw = SNspread::create_network(n = 5)
nw = SNspread::update_network(nw, gender = c(1,1,0,0,1,1))
SNspread::create_graph(nw)
nw = SNspread::sim_spread(nw, 2)
SNspread::create_graph(nw)
devtools::build()
devtools::load_all()
SNspread::create_graph(nw)
nw = SNspread::update_network(nw, gender = c(1,1,0,2,1,1))
SNspread::create_graph(nw)
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::build()
devtools::install()
devtools::document()
runApp()
devtools::build()
devtools::install()
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::build()
runApp
runApp()
devtools::install()
runApp()
